package com.gitplex.commons.lang.extractors;

import java.io.Serializable;

import javax.annotation.Nullable;

import com.gitplex.commons.util.Range;

/**
 * A simplified version of ANTLR lexer token
 * 
 * @author robin
 *
 */
public class Token implements Serializable {

	private static final long serialVersionUID = 1L;

	public static final Token EOF = new Token(org.antlr.v4.runtime.Token.EOF, "", null);
	
	private final int type;
	
	private final String text;
	
	private final TokenPosition pos;
	
	/**
	 * Constructing the token from ANTLR lexer token
	 * 
	 * @param antlrToken
	 * 			the ANTLR lexer token
	 */
	public Token(org.antlr.v4.runtime.Token antlrToken) {
		type = antlrToken.getType();
		text = antlrToken.getText();
		Range range = new Range(antlrToken.getCharPositionInLine(), 
				antlrToken.getCharPositionInLine() + text.length());
		pos = new TokenPosition(antlrToken.getLine()-1, range);
	}

	/**
	 * Construct the token with type, text and position
	 * 
	 * @param type
	 * 			type of the token, normally it uses token type generated by ANTLR lexer
	 * @param text
	 * 			text of the token
	 * @param pos
	 * 			position of the token, use <tt>null</tt> for EOF token
	 */
	public Token(int type, String text, @Nullable TokenPosition pos) {
		this.type = type;
		this.text = text;
		this.pos = pos;
	}
	
	/**
	 * Check if this token is of specified type
	 * 
	 * @param type
	 * 			ANTLR lexer token type to check
	 * @return
	 * 			whether or not this token is of specifed type
	 */
	public boolean is(int type) {
		return this.type == type; 
	}
	
	/**
	 * Check if this token is of any specified types
	 * 
	 * @param types
	 * 			ANTLR lexer token types to check
	 * @return
	 * 			whether or not this token is of specified types
	 */
	public boolean is(int...types) {
		for (int type: types) {
			if (this.type == type)
				return true;
		}
		return false;
	}
	
	/**
	 * Check if the token text equals specified text
	 * 
	 * @param text
	 * 			text to compare
	 * @return
	 * 			whether or not the token text equals specified text
	 */
	public boolean is(String text) {
		return text.equals(this.text);
	}
	
	/**
	 * Is this token the EOF token
	 * 
	 * @return
	 * 			whether or not the token is EOF token
	 */
	public boolean isEof() {
		return type == org.antlr.v4.runtime.Token.EOF;
	}

	/**
	 * Get ANTLR lexer token type
	 * 
	 * @return
	 * 			ANTLR lexer token type 
	 */
	public int getType() {
		return type;
	}

	/**
	 * Get text of the token
	 * 
	 * @return
	 * 			text of the token
	 */
	public String getText() {
		return text;
	}

	/**
	 * Get position of the token in source file
	 * 	
	 * @return
	 * 			position of the token in source file
	 */
	public TokenPosition getPos() {
		return pos;
	}
	
	/**
	 * check if the token is of specified types
	 * 
	 * @return
	 * 			token to be checked
	 * @throws
	 * 			UnexpectedTokenException if token is not of expected types
	 */
	public Token checkType(int... expectedTypes) {
		if (!is(expectedTypes))
			throw new UnexpectedTokenException(this);
		return this;
	}
	
	/**
	 * check if the token text equals specified text
	 * 
	 * @return
	 * 			token to be checked
	 * @throws
	 * 			UnexpectedTokenException if token text does not equal to expected text
	 */
	public Token checkText(String expectedText) {
		if (!text.equals(expectedText))
			throw new UnexpectedTokenException(this);
		return this;
	}
	
	@Override
	public String toString() {
		return text;
	}

}
